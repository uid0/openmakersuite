name: üß™ Test Release Automation

# This workflow tests the release automation system
# Run manually to verify everything is configured correctly

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry run mode (no actual release)'
        required: true
        default: true
        type: boolean
      test_signing:
        description: 'Test cryptographic signing'
        required: true
        default: true
        type: boolean

permissions:
  contents: read
  packages: read
  id-token: write  # Required for signing

jobs:
  test-prerequisites:
    name: üîç Test Prerequisites
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Test GitHub CLI access
        run: |
          if gh --version; then
            echo "‚úÖ GitHub CLI is available"
          else
            echo "‚ùå GitHub CLI not available"
            exit 1
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Test repository access
        run: |
          REPO_INFO=$(gh repo view --json name,owner)
          echo "‚úÖ Repository access confirmed"
          echo "Repository: $(echo $REPO_INFO | jq -r '.owner.login + "/" + .name')"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Test version generation logic
        run: |
          # Test semantic version parsing
          CURRENT_VERSION="1.2.3"
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          # Test patch increment
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          
          echo "‚úÖ Version logic test: $CURRENT_VERSION ‚Üí $NEW_VERSION"
          
          if [ "$NEW_VERSION" = "1.2.4" ]; then
            echo "‚úÖ Version increment logic works correctly"
          else
            echo "‚ùå Version increment logic failed"
            exit 1
          fi

  test-docker-build:
    name: üê≥ Test Docker Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Test backend build
        run: |
          echo "üèóÔ∏è Testing backend Docker build..."
          docker buildx build \
            --platform linux/amd64 \
            --tag test-backend:latest \
            --file backend/Dockerfile \
            backend/
          echo "‚úÖ Backend build successful"

      - name: Test frontend build
        run: |
          echo "üèóÔ∏è Testing frontend Docker build..."
          docker buildx build \
            --platform linux/amd64 \
            --tag test-frontend:latest \
            --file frontend/Dockerfile \
            frontend/
          echo "‚úÖ Frontend build successful"

  test-signing:
    name: üîê Test Cryptographic Signing
    runs-on: ubuntu-latest
    if: github.event.inputs.test_signing == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install cosign
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.2.2'

      - name: Create test file
        run: |
          echo "This is a test file for signing" > test-file.txt
          sha256sum test-file.txt > test-file.txt.sha256

      - name: Test signing
        run: |
          echo "üîê Testing cryptographic signing..."
          
          # Sign the test file
          cosign sign-blob \
            --output-signature test-file.txt.sig \
            --output-certificate test-file.txt.pem \
            test-file.txt
          
          echo "‚úÖ Signing completed"
        env:
          COSIGN_EXPERIMENTAL: 1

      - name: Test signature verification
        run: |
          echo "üîç Testing signature verification..."
          
          # Verify the signature
          cosign verify-blob \
            --certificate test-file.txt.pem \
            --signature test-file.txt.sig \
            test-file.txt
          
          echo "‚úÖ Signature verification successful"
        env:
          COSIGN_EXPERIMENTAL: 1

  test-sentry-config:
    name: üìä Test Sentry Configuration
    runs-on: ubuntu-latest
    steps:
      - name: Check Sentry secrets
        run: |
          echo "üîç Checking Sentry configuration..."
          
          if [ -z "${{ secrets.SENTRY_AUTH_TOKEN }}" ]; then
            echo "‚ö†Ô∏è  SENTRY_AUTH_TOKEN not configured"
            SENTRY_OK=false
          else
            echo "‚úÖ SENTRY_AUTH_TOKEN is configured"
            SENTRY_OK=true
          fi
          
          if [ -z "${{ secrets.SENTRY_ORG }}" ]; then
            echo "‚ö†Ô∏è  SENTRY_ORG not configured"
            SENTRY_OK=false
          else
            echo "‚úÖ SENTRY_ORG is configured"
          fi
          
          if [ -z "${{ secrets.SENTRY_PROJECT }}" ]; then
            echo "‚ö†Ô∏è  SENTRY_PROJECT not configured"
            SENTRY_OK=false
          else
            echo "‚úÖ SENTRY_PROJECT is configured"
          fi
          
          if [ "$SENTRY_OK" = true ]; then
            echo "‚úÖ Sentry integration is properly configured"
          else
            echo "‚ö†Ô∏è  Sentry integration needs configuration"
            echo "Run './scripts/setup-release-automation.sh' to configure"
          fi

  test-changelog-generation:
    name: üìù Test Changelog Generation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Test changelog generation
        run: |
          echo "üìù Testing changelog generation..."
          
          # Generate a test changelog
          echo "## üöÄ Release v1.0.0-test" > test-changelog.md
          echo "" >> test-changelog.md
          echo "### üìù Changes" >> test-changelog.md
          
          # Get recent commits (last 5)
          git log --oneline -5 --pretty=format:"- %s" >> test-changelog.md || echo "- üéâ Test release" >> test-changelog.md
          
          echo "" >> test-changelog.md
          echo "### üîß Technical Details" >> test-changelog.md
          echo "- **Tests**: All passing" >> test-changelog.md
          echo "- **Security**: All checks passed" >> test-changelog.md
          
          echo "‚úÖ Changelog generated:"
          echo "========================"
          cat test-changelog.md
          echo "========================"

  test-summary:
    name: üìã Test Summary
    runs-on: ubuntu-latest
    needs: [test-prerequisites, test-docker-build, test-signing, test-sentry-config, test-changelog-generation]
    if: always()
    steps:
      - name: Generate test report
        run: |
          echo "üß™ Release Automation Test Results"
          echo "=================================="
          echo ""
          
          # Check job results
          echo "Job Results:"
          echo "- Prerequisites: ${{ needs.test-prerequisites.result }}"
          echo "- Docker Build: ${{ needs.test-docker-build.result }}"
          echo "- Signing: ${{ needs.test-signing.result }}"
          echo "- Sentry Config: ${{ needs.test-sentry-config.result }}"
          echo "- Changelog: ${{ needs.test-changelog-generation.result }}"
          echo ""
          
          # Overall status
          if [[ "${{ needs.test-prerequisites.result }}" == "success" && \
                "${{ needs.test-docker-build.result }}" == "success" && \
                ("${{ needs.test-signing.result }}" == "success" || "${{ needs.test-signing.result }}" == "skipped") && \
                "${{ needs.test-sentry-config.result }}" == "success" && \
                "${{ needs.test-changelog-generation.result }}" == "success" ]]; then
            echo "‚úÖ All tests passed! Release automation is ready."
            echo ""
            echo "Next steps:"
            echo "1. üîß Configure any missing Sentry secrets"
            echo "2. üöÄ Push commits to main branch to trigger automatic releases"
            echo "3. üìñ Read RELEASE_AUTOMATION.md for full documentation"
          else
            echo "‚ùå Some tests failed. Please review the job outputs above."
            echo ""
            echo "Common fixes:"
            echo "- Run './scripts/setup-release-automation.sh' to configure secrets"
            echo "- Check Docker builds are working correctly"
            echo "- Verify repository permissions"
            exit 1
          fi

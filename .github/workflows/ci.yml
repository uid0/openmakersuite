name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: makerspace_inventory_test
          POSTGRES_USER: makerspace
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client libpq-dev

    - name: Install Python dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort

    - name: Run linting (flake8)
      working-directory: ./backend
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude=migrations,__pycache__,venv

    - name: Check code formatting (black)
      working-directory: ./backend
      run: |
        black --check --diff --exclude=migrations .

    - name: Check import sorting (isort)
      working-directory: ./backend
      run: |
        isort --check-only --diff --skip migrations .

    - name: Run migrations
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://makerspace:test_password@localhost:5432/makerspace_inventory_test
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key-for-ci
        DEBUG: 1
        ALLOWED_HOSTS: localhost,127.0.0.1
      run: |
        python manage.py migrate

    - name: Run tests with coverage
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://makerspace:test_password@localhost:5432/makerspace_inventory_test
        REDIS_URL: redis://localhost:6379/0
        CELERY_BROKER_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key-for-ci
        DEBUG: 1
        ALLOWED_HOSTS: localhost,127.0.0.1
      run: |
        pytest --cov --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run linting
      working-directory: ./frontend
      run: npm run lint || echo "Linting not configured, skipping..."

    - name: Run tests with coverage
      working-directory: ./frontend
      env:
        CI: true
      run: npm run test:coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: ./frontend/coverage/coverage-final.json
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: false

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create .env file
      run: |
        cat > .env << EOF
        POSTGRES_DB=makerspace_inventory
        POSTGRES_USER=makerspace
        POSTGRES_PASSWORD=test_password
        DATABASE_URL=postgresql://makerspace:test_password@db:5432/makerspace_inventory
        REDIS_URL=redis://redis:6379/0
        CELERY_BROKER_URL=redis://redis:6379/0
        DEBUG=1
        SECRET_KEY=test-secret-key-for-docker-build
        ALLOWED_HOSTS=localhost,127.0.0.1
        REACT_APP_API_URL=http://localhost:8000
        SENTRY_DSN=
        REACT_APP_SENTRY_DSN=
        SENTRY_ENVIRONMENT=ci
        EOF

    - name: Build Docker images
      run: docker compose build

    - name: Start services
      run: docker compose up -d

    - name: Wait for services to be healthy
      run: |
        echo "Waiting for database..."
        timeout 60 bash -c 'until docker compose exec -T db pg_isready -U makerspace; do sleep 2; done'
        echo "Waiting for Redis..."
        timeout 60 bash -c 'until docker compose exec -T redis redis-cli ping; do sleep 2; done'
        echo "Waiting for backend..."
        sleep 10

    - name: Run migrations in Docker
      run: docker compose exec -T backend python manage.py migrate

    - name: Run backend tests in Docker
      run: docker compose exec -T backend pytest --no-cov -v

    - name: Check service logs on failure
      if: failure()
      run: |
        echo "=== Backend logs ==="
        docker compose logs backend
        echo "=== Database logs ==="
        docker compose logs db
        echo "=== Redis logs ==="
        docker compose logs redis

    - name: Cleanup
      if: always()
      run: docker compose down -v

  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety

    - name: Run security checks (bandit)
      working-directory: ./backend
      run: |
        bandit -r . -x ./tests,./migrations,./venv,./inventory/tests,./reorder_queue/tests,./index_cards/tests -f json -o bandit-report.json || true
        bandit -r . -x ./tests,./migrations,./venv,./inventory/tests,./reorder_queue/tests,./index_cards/tests

    - name: Check dependencies for known vulnerabilities (safety)
      working-directory: ./backend
      run: |
        safety check --json || true
        safety check

    - name: Check for secrets (gitleaks)
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

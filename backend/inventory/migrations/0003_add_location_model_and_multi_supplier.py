# Generated migration to add Location model and ItemSupplier with data migration

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


def create_locations_from_existing_data(apps, schema_editor):
    """Create Location objects from existing location strings."""
    InventoryItem = apps.get_model('inventory', 'InventoryItem')
    Location = apps.get_model('inventory', 'Location')

    # Get all unique location strings
    unique_locations = InventoryItem.objects.values_list('location_old', flat=True).distinct()

    # Create Location objects for each unique location
    location_map = {}
    for loc_name in unique_locations:
        if loc_name:  # Skip empty strings
            location, created = Location.objects.get_or_create(
                name=loc_name,
                defaults={'description': f'Auto-created from existing data'}
            )
            location_map[loc_name] = location

    # Update items to point to new Location objects
    for item in InventoryItem.objects.all():
        if item.location_old and item.location_old in location_map:
            item.location_new = location_map[item.location_old]
            item.save(update_fields=['location_new'])


class Migration(migrations.Migration):

    dependencies = [
        ('inventory', '0002_update_supplier_type_choices'),
    ]

    operations = [
        # Step 1: Create Location model
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, help_text='Details about this location')),
                ('is_active', models.BooleanField(default=True, help_text='Inactive locations are hidden from selection')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),

        # Step 2: Rename old location field
        migrations.RenameField(
            model_name='inventoryitem',
            old_name='location',
            new_name='location_old',
        ),

        # Step 3: Add new location_new field as ForeignKey
        migrations.AddField(
            model_name='inventoryitem',
            name='location_new',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                help_text='Physical storage location',
                related_name='items',
                to='inventory.location'
            ),
        ),

        # Step 4: Run data migration to create Location objects and populate location_new
        migrations.RunPython(create_locations_from_existing_data, reverse_code=migrations.RunPython.noop),

        # Step 5: Remove old location_old field
        migrations.RemoveField(
            model_name='inventoryitem',
            name='location_old',
        ),

        # Step 6: Rename location_new to location
        migrations.RenameField(
            model_name='inventoryitem',
            old_name='location_new',
            new_name='location',
        ),

        # Step 7: Update image field
        migrations.AlterField(
            model_name='inventoryitem',
            name='image',
            field=models.ImageField(
                blank=True,
                help_text='Upload image (supports JPEG, PNG, WebP)',
                null=True,
                upload_to='inventory/images/'
            ),
        ),

        # Step 8: Add image_url field
        migrations.AddField(
            model_name='inventoryitem',
            name='image_url',
            field=models.URLField(blank=True, help_text='URL to download image from (optional)'),
        ),

        # Step 9: Remove thumbnail field (will be auto-generated by ImageSpecField)
        migrations.RemoveField(
            model_name='inventoryitem',
            name='thumbnail',
        ),

        # Step 10: Update SKU field
        migrations.AlterField(
            model_name='inventoryitem',
            name='sku',
            field=models.CharField(
                blank=True,
                help_text='Internal SKU - auto-generated if not provided',
                max_length=100,
                unique=True
            ),
        ),

        # Step 11: Create ItemSupplier model
        migrations.CreateModel(
            name='ItemSupplier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('supplier_sku', models.CharField(help_text="Supplier's product SKU/ID", max_length=100)),
                ('supplier_url', models.URLField(blank=True, help_text="Direct link to product on supplier's website")),
                ('unit_cost', models.DecimalField(blank=True, decimal_places=2, help_text='Cost per unit from this supplier', max_digits=10, null=True)),
                ('average_lead_time', models.PositiveIntegerField(default=7, help_text='Average lead time in days from this supplier')),
                ('is_primary', models.BooleanField(default=False, help_text='Preferred/primary supplier for this item')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this supplier option is currently active')),
                ('notes', models.TextField(blank=True, help_text='Notes about this supplier for this item')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='item_suppliers', to='inventory.inventoryitem')),
                ('supplier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='supplier_items', to='inventory.supplier')),
            ],
            options={
                'ordering': ['-is_primary', 'unit_cost'],
                'unique_together': {('item', 'supplier')},
            },
        ),

        # Step 12: Add ManyToMany field for suppliers
        migrations.AddField(
            model_name='inventoryitem',
            name='suppliers',
            field=models.ManyToManyField(
                blank=True,
                related_name='supplied_items',
                through='inventory.ItemSupplier',
                to='inventory.supplier'
            ),
        ),

        # Step 13: Remove old supplier-related fields
        migrations.RemoveField(
            model_name='inventoryitem',
            name='supplier',
        ),
        migrations.RemoveField(
            model_name='inventoryitem',
            name='supplier_sku',
        ),
        migrations.RemoveField(
            model_name='inventoryitem',
            name='supplier_url',
        ),
        migrations.RemoveField(
            model_name='inventoryitem',
            name='unit_cost',
        ),
        migrations.RemoveField(
            model_name='inventoryitem',
            name='average_lead_time',
        ),

        # Step 14: Add indexes to ItemSupplier
        migrations.AddIndex(
            model_name='itemsupplier',
            index=models.Index(fields=['item', 'is_primary'], name='inventory_i_item_id_872ceb_idx'),
        ),
        migrations.AddIndex(
            model_name='itemsupplier',
            index=models.Index(fields=['item', 'unit_cost'], name='inventory_i_item_id_cae73f_idx'),
        ),
    ]

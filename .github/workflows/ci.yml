name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_makerspace
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Lint with flake8
      working-directory: ./backend
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check code formatting with black
      working-directory: ./backend
      run: |
        black --check --diff .
    
    - name: Check import sorting with isort
      working-directory: ./backend
      run: |
        isort --check-only --diff .
    
    - name: Run migrations
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_makerspace
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key-for-github-actions
        DEBUG: true
        ALLOWED_HOSTS: localhost,127.0.0.1
      run: |
        python manage.py migrate
    
    - name: Run tests with coverage
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_makerspace
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key-for-github-actions
        DEBUG: true
        ALLOWED_HOSTS: localhost,127.0.0.1
      run: |
        pytest --cov --cov-report=xml --cov-fail-under=80
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm install
    
    - name: Run linting
      working-directory: ./frontend
      run: |
        # Check if lint script exists in package.json
        if npm run | grep -q "lint"; then
          npm run lint
        else
          echo "No lint script found, skipping linting"
        fi
    
    - name: Run tests with coverage
      working-directory: ./frontend
      env:
        CI: true
      run: |
        npm run test:ci
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker images
      run: |
        docker compose build
    
    - name: Start services
      run: |
        docker compose up -d
        
        # Wait for services to be healthy
        echo "Waiting for services to start..."
        timeout 120s bash -c 'until docker compose ps | grep healthy; do sleep 5; done'
    
    - name: Run migrations in Docker
      run: |
        docker compose exec -T backend python manage.py migrate
    
    - name: Run backend tests in Docker
      run: |
        docker compose exec -T backend pytest --cov
    
    - name: Show logs on failure
      if: failure()
      run: |
        echo "=== Backend logs ==="
        docker compose logs backend
        echo "=== Frontend logs ==="
        docker compose logs frontend
        echo "=== Database logs ==="
        docker compose logs db
    
    - name: Cleanup
      if: always()
      run: |
        docker compose down -v

  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for gitleaks
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install security tools
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run bandit security scan
      working-directory: ./backend
      run: |
        bandit -r . -x ./tests,./migrations -f json -o bandit-report.json || true
        bandit -r . -x ./tests,./migrations -s B101,B106
    
    - name: Check for vulnerable dependencies
      working-directory: ./backend
      run: |
        safety check --json --output safety-report.json || true
        safety check
    
    - name: Run gitleaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}